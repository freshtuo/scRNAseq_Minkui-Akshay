  #Analysis 2019 scRNAseq data with tSNE (v2.3.4 Seurat)

#Save your stuff: save.image(file = "my_work_space.RData")
#saveRDS()
#readRDS()
#loadRDS()

obj <- readRDS("obj")











BiocManager::install("topGo")
.libPaths()







#Packages
#Done

memory.limit(35000)
library(Seurat)
library(dplyr)
#source("https://z.umn.edu/archived-seurat")
library(patchwork)
library(cluster, quietly = TRUE)
library(factoextra)
library(stats)
library(tibble)
library(SciViews)




#An object of class Seurat
#Rows are genes, columns are cells, inputs are UMIs
#Done
#data = read.table("C:/Users/Owner/Desktop/scRNA 2019 data/raw.counts.data/counts.dedup.all.merged.txt", sep = "\t", check.names = FALSE, row.names = 1, header = TRUE, stringsAsFactors = FALSE)
#obj <- CreateSeuratObject(counts = data, project = "Analysis of 20219 scRNAseq CARM1 data", min.cells = 3, min.features = 200)
# 
# #Normalization of raw UMI counts per cell. Divides total number of UMIs in each cell, multiplies by a scale factor of 10000, and transforms into natural log values.
# #Done
# obj <- NormalizeData(obj, normalization.method = "LogNormalize", scale.factor = 10000)
# 
# #Quality Control. Keeps cells with 1000-5000 genes and < 20% mitochondrial RNA transcripts for further analysis.
# #Done
# obj[["percent.mt"]] <- PercentageFeatureSet(obj, pattern = "^MT-")
# obj <- subset(obj, subset = nFeature_RNA > 1000 & nFeature_RNA < 5000 & percent.mt < 20)
# 
# #This selects a set of highly variable genes on the basis of average expression and dispersion per gene.
# #Done
# obj <- FindVariableFeatures(obj, selection.method = "mvp")
# 
# #Scale Data so mean expression is 0 and variance is 1. 
# #Done
# all.genes <- rownames(obj)
# obj[["percent.ribo"]] <- PercentageFeatureSet(obj, pattern = "^RP[SL]")
# obj <- ScaleData(obj, features = all.genes, vars.to.regress = c("percent.mt", "nCount_RNA", "percent.ribo"))
# 
# 
# #Perform PCA
# #Top PCAs: 
# #Done
# obj <- RunPCA(obj, features = VariableFeatures(object = obj))
# 
# #Creates plot of PCAs so we can choose which PCAs have the most direction in the data.We then choose the most influential PCAs for future analysis.
# #Choose PCAs that were over 20% standard deviation of variance (8 PCAs)
# #Done
# ElbowPlot(obj) + geom_hline(yintercept = 2)
# 
# 
#         #Clustering
# #FindClusters(): Applies modularity optimization techniques such as Louvain algorithm or SLM to group cells together. Goal is to optimize standard modularity function. 
# #This function does this, and has a resolution parameter that sets the granularity of the downstream clustering. Increased values means greater number of clusters.
# #Done
clusterobj <- FindNeighbors(obj, dims = 1:8)
clusterobj <- FindClusters(obj, algorithm = 3, resolution = 1.4)

      #t-SNE plot of clusters
clusterobj <- RunTSNE(clusterobj, dims = 1:8)
DimPlot(clusterobj, reduction = "tsne", label = TRUE, label.box = TRUE) + ggtitle('tSNE plots by Cluster') + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())






      #Cell-Cycle Awareness

#Markers of G2/M phase and markers of S phase
#Done
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes

#To assign cells to cell cycle stages
#Cells scored on the basis of their expression of G2/M phase and S phase markers by comparing average expression of these markers with that of a random set of background genes.
#Cells with positive higher S phase or G2/M phase scores were assigned these markers.
#Cells with negative S-phase and G2/M phase scores were assigned as non-S/G2/M-phase cells and annotated as G0/G1 phases cells.
#Cell subpopulation can thus be classified as three groups
#Done

#Assigns scores.
#Done
objscores <- CellCycleScoring(clusterobj, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)

#View Scores
#Done
head(objscores)
#look at cells in G1 phase.

#Silhouette Analysis

#Conducted with no awareness of cell origins
#Calculated based on Euclidean distance between cells on t-SNE
#Silhouette Analysis provides a graphical representation of how well each object has been clustered. Silhouette ranges from -1 to +1. 
#High values means object well matched to its own cluster and poorly matched to neighboring clusters.
#If many points have low or negative value, clustering configuration may have too many or too few clusters.
#Done

#Should be a high value, like close to 1, as that means that it is clustered well to its own cluster, and a poor match for other cluster. Negative values are bad.



  reduction <- "pca"
  dims <- 1:8
  dist.matrix <- dist(x = Embeddings(object = clusterobj[[reduction]])[, dims])
  clusters <- clusterobj@meta.data$seurat_cluster
  sil <- silhouette(x = as.numeric(x = clusters), dist = dist.matrix)
  clusterobj@meta.data$sil <- sil[,3]

  mean_silhouette_score1.4 <- mean(clusterobj@meta.data$sil)
  mean_silhouette_score1.4
 
#0.1 - 0.28426 , 5 communities
#0.2 - 0.2714088, 6 communities
#0.3 - 0.1941242, 7 communities
#0.4 - 0.1684165, 9 communities
#0.5 - 0.1756437, 11 communities
#0.6 - 0.1688707, 11 communities
#0.7 - 0.1605828, 13 communities
#0.8 - 0.1619451, 14 communities
#0.9 - 0.1586997, 16 communities
#1.0 - 0.1605387, 16 communities
#1.1 - 0.1583449, 16 communities
#1.2 - 0.1501718, 18 communities
#1.3 - 0.1514925, 18 communities
#1.4 - 0.1433059, 20 communities
#1.5 - 0.1411004, 22 communities
  





silhouetteplot <- clusterobj@meta.data %>%
  mutate(barcode = rownames(.)) %>%
  arrange(seurat_clusters,-sil) %>%
  mutate(barcode = factor(barcode, levels = barcode)) %>%
  ggplot() +
  geom_col(aes(barcode, sil, fill = seurat_clusters), show.legend = FALSE) +
  geom_hline(yintercept = mean_silhouette_score1.4, color = 'red', linetype = 'dashed') +
  scale_x_discrete(name = 'Cells') +
  scale_y_continuous(name = 'Silhouette score') +
  theme_bw() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
silhouetteplot



#Entropy Scoring

#negative summation (from i = 0 to the # of subpopulations there are) of the following equation:
#(fraction of the subpopulation of the total cell population * (the following summation)
#Summation (from j = 1 to 3, checking each cell origin), of (fractional distribution of the cells with the j origin within the i subpopulation) * natural log of d j,i)
#All of this is divided by the following negative summation, from (j = 1 to 3, representing each cell origin), which is
#fraction of the cells with the j origin within the total population times natural log of fraction of the subpopulation i in the total cell population

#objscores <- FindNeighbors(obj, dims = 1:8)
#objscores <- FindClusters(obj, algorithm = 3, resolution = 1.4)


cell.num.clusters <- table(clusterobj@active.ident)
cell.num.oldident <- table(objscores@meta.data$seurat_clusters, objscores@meta.data$orig.ident)
cell.num.oldident
cell.num.ident <- table(objscores@meta.data$orig.ident)
cell.num.ident

fi0 <- 1539
fi1 <- 1507
fi2 <- 1351
fi3 <- 1273
fi4 <- 1253
fi5 <- 1228
fi6 <- 1032
fi7 <- 873
fi8 <- 846
fi9 <- 843
fi10 <- 842
fi11 <- 822
fi12 <- 798
fi13 <- 776
fi14 <- 774
fi15 <- 718
fi16 <- 685
fi17 <- 513
fi18 <- 168
fi19 <- 157


a1 <- (fi0/17998 * ((88/fi0 * ln(88/fi0)) + (711/fi0 * ln(711/fi0)) + (711/fi0 * ln(711/fi0)))) + (fi1/17998 * ((0) + (1/fi1 * ln(1/fi1)) + (2/fi1 * ln(2/fi1)))) + (fi2/17998 * ((1077/fi2 * ln(1077/fi2)) + (171/fi2 * ln(171/fi2)) + (20/fi2 * ln(20/fi2)))) + (fi3/17998 * ((131/fi3 * ln(131/fi3)) + (66/fi3 * ln(66/fi3)) + (40/fi3 * ln(40/fi3)))) + (fi4/17998 * (243/fi4 * ln(243/fi4)) + (484/fi4 * ln(484/fi4)) + (458/fi4 * ln(458/fi4))) + (fi5/17998 * ((282/fi5 * ln(282/fi5)) + (107/fi5 * ln(107/fi5)) + (16/fi5 * ln(16/fi5)))) + (fi6/17998 * ((337/fi6 * ln(337/fi6)) + (361/fi6 * ln(361/fi6)) + (260/fi6 * ln(260/fi6)))) + (fi7/17998 * ((0) + (3/fi7 * ln(3/fi7)) + (4/fi7 * ln(4/fi7)))) + (fi8/17998 * ((38/fi8 * ln(38/fi8)) + (398 + ln(398/fi8)) + (409/fi8 + ln(409/fi8)))) + (fi9/17998 * ((124/fi9 * ln(124/fi9)) + (290/fi9 * ln(290/fi9)) + (327/fi9 * ln(327/fi9)))) + (fi10/17998 * ((360/fi10 + ln(360/fi10)) + (282/fi10 + ln(282/fi10)) + (157/fi10 + ln(157/fi10)))) + (fi11/17998 * ((34/fi11 + ln(34/fi11)) + (290/fi11 + ln(290/fi11)) + (496/fi11 + ln(496/fi11)))) + (fi12/17998 * ((715/fi12 + ln(715/fi12)) + (44/fi12 + ln(44/fi12)) + (12/fi12 + ln(12/fi12)))) + (fi13/17998 * ((20/fi13 + ln(20/fi13)) + (6/fi13 + ln(6/fi13)) + (6/fi13 + ln(6/fi13)))) + (fi14/17998 * ((68/fi14 + ln(68/fi14)) + (12/fi14 + ln(12/fi14)) + (7/fi14 + ln(7/fi14)))) + (fi15/17998 * ((0) + (0) + (0))) + (fi16/17998 * ((323/fi16 + ln(323/fi16)) + (172/fi16 + ln(172/fi16)) + (163/fi16 + ln(163/fi16)))) + (fi17/17998 * ((127/fi17 + ln(127/fi17)) + (152/fi17 + ln(152/fi17)) + (138/fi17 + ln(138/fi17)))) + (fi18/17998 * ((131/fi18 + ln(131/fi18)) + (30/fi18 + ln(30/fi18)) + (3/fi18 + ln(3/fi18)))) + (fi19/17998 * ((1/fi19 + ln(1/fi19)) + (3/fi19 + ln(3/fi19)) + (3/fi19 + ln(3/fi19))))                          


a2 <- -((4099/17998 * ln(fi0/17998)) + (3583/17998 * ln(fi0/17998)) + (3232/17998 * ln(fi0/17998))) - ((4099/17998 * ln(fi1/17998)) + (3583/17998 * ln(fi1/17998)) + (3232/17998 * ln(fi1/17998))) - ((4099/17998 * ln(fi2/17998)) + (3583/17998 * ln(fi2/17998)) + (3232/17998 * ln(fi2/17998))) - ((4099/17998 * ln(fi3/17998)) + (3583/17998 * ln(fi3/17998)) + (3232/17998 * ln(fi3/17998))) - ((4099/17998 * ln(fi4/17998)) + (3583/17998 * ln(fi4/17998)) + (3232/17998 * ln(fi4/17998))) - ((4099/17998 * ln(fi5/17998)) + (3583/17998 * ln(fi5/17998)) + (3232/17998 * ln(fi5/17998))) - ((4099/17998 * ln(fi6/17998)) + (3583/17998 * ln(fi6/17998)) + (3232/17998 * ln(fi6/17998))) - ((4099/17998 * ln(fi7/17998)) + (3583/17998 * ln(fi7/17998)) + (3232/17998 * ln(fi7/17998))) - ((4099/17998 * ln(fi8/17998)) + (3583/17998 * ln(fi8/17998)) + (3232/17998 * ln(fi8/17998))) - ((4099/17998 * ln(fi9/17998)) + (3583/17998 * ln(fi9/17998)) + (3232/17998 * ln(fi9/17998))) - ((4099/17998 * ln(fi10/17998)) + (3583/17998 * ln(fi10/17998)) + (3232/17998 * ln(fi10/17998))) - ((4099/17998 * ln(fi11/17998)) + (3583/17998 * ln(fi11/17998)) + (3232/17998 * ln(fi11/17998))) - ((4099/17998 * ln(fi12/17998)) + (3583/17998 * ln(fi12/17998)) + (3232/17998 * ln(fi12/17998))) - ((4099/17998 * ln(fi13/17998)) + (3583/17998 * ln(fi13/17998)) + (3232/17998 * ln(fi13/17998))) - ((4099/17998 * ln(fi14/17998)) + (3583/17998 * ln(fi14/17998)) + (3232/17998 * ln(fi14/17998))) - ((4099/17998 * ln(fi15/17998)) + (3583/17998 * ln(fi15/17998)) + (3232/17998 * ln(fi15/17998))) - ((4099/17998 * ln(fi16/17998)) + (3583/17998 * ln(fi16/17998)) + (3232/17998 * ln(fi16/17998))) - ((4099/17998 * ln(fi17/17998)) + (3583/17998 * ln(fi17/17998)) + (3232/17998 * ln(fi17/17998))) - ((4099/17998 * ln(fi18/17998)) + (3583/17998 * ln(fi18/17998)) + (3232/17998 * ln(fi18/17998))) - ((4099/17998 * ln(fi19/17998)) + (3583/17998 * ln(fi19/17998)) + (3232/17998 * ln(fi19/17998)))

entropy_score <- a1/a2

#change fi in bottom equation to fj




#Fisher's Exact Test

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("topGO")




#Population Analysis
#Can do once I've finished the earlier analyses



#Correlation Analysis of Subpopulations
#In each cell cycle (G0/G1, S and G2/M) of the cells treated with DMSO, SKI-73 (6a) or SKI-73N (6b) and 'invasion cells', correlation analysis of subpopulations was conducted

#BuildClusterTree(object = , features = VariableFeatures(object = object), )


#Differential Expression and Selection of Representative Transcripts

#FindMarkers(object, features = VariableFeatures(object = object), test.use = "wilcox")

#DoHeatmap(object, )
















#FUNCTIONS




