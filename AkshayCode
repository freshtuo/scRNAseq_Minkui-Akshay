   #Analysis 2019 scRNAseq data with tSNE (v2.3.4 Seurat)

#Save your stuff: save.image(file = "my_work_space.RData")
#saveRDS()
#readRDS()
#loadRDS()


#Notes to self
#Assume results of 2019 paper correct with analysis. No need to create plots for every # of subpopulations.
#However, create plots for each phase
#Use fisher's exact test code to optimize other plot creation





#Packages
#Done

obj <- readRDS("obj")


# RenameIdents(obj, old.ident.name = R1M1, new.ident.name = 'DMSO')
# RenameIdents(obj, old.ident.name = R1M2, new.ident.name = 'SKI-73N')
# RenameIdents(obj, old.ident.name = R1M3, new.ident.name = 'SKI-73')
# RenameIdents(obj, old.ident.name = R1M4, new.ident.name = 'Invasion_cells')
# RenameIdents(obj, old.ident.name = R1M5, new.ident.name = 'CARM1-KO')
memory.limit(35000)
library(Seurat)
library(dplyr)
#source("https://z.umn.edu/archived-seurat")
library(patchwork)
library(cluster, quietly = TRUE)
library(factoextra)
library(stats)
library(tibble)
library(SciViews)





#An object of class Seurat
#Rows are genes, columns are cells, inputs are UMIs
#Done
#data = read.table("C:/Users/Owner/Desktop/scRNA 2019 data/raw.counts.data/counts.dedup.all.merged.txt", sep = "\t", check.names = FALSE, row.names = 1, header = TRUE, stringsAsFactors = FALSE)
#obj <- CreateSeuratObject(counts = data, project = "Analysis of 20219 scRNAseq CARM1 data", min.cells = 3, min.features = 200)
# 
# #Normalization of raw UMI counts per cell. Divides total number of UMIs in each cell, multiplies by a scale factor of 10000, and transforms into natural log values.
# #Done
# obj <- NormalizeData(obj, normalization.method = "LogNormalize", scale.factor = 10000)
# 
# #Quality Control. Keeps cells with 1000-5000 genes and < 20% mitochondrial RNA transcripts for further analysis.
# #Done
 obj[["percent.mt"]] <- PercentageFeatureSet(obj, pattern = "^MT-")
# obj <- subset(obj, subset = nFeature_RNA > 1000 & nFeature_RNA < 5000 & percent.mt < 20)
# 
# #This selects a set of highly variable genes on the basis of average expression and dispersion per gene.
# #Done
# obj <- FindVariableFeatures(obj, selection.method = "mvp")
# 
# #Scale Data so mean expression is 0 and variance is 1. 
# #Done
 all.genes <- rownames(obj)
 obj[["percent.ribo"]] <- PercentageFeatureSet(obj, pattern = "^RP[SL]")
# obj <- ScaleData(obj, features = all.genes, vars.to.regress = c("percent.mt", "nCount_RNA", "percent.ribo"))
# 
# 
# #Perform PCA
# #Top PCAs: 
# #Done
# obj <- RunPCA(obj, features = VariableFeatures(object = obj))
# 
# #Creates plot of PCAs so we can choose which PCAs have the most direction in the data.We then choose the most influential PCAs for future analysis.
# #Choose PCAs that were over 20% standard deviation of variance (8 PCAs)
# #Done
  elbowplot <- ElbowPlot(obj) + geom_hline(yintercept = 2)
# 
# 
  #Cell-Cycle Awareness
  
#Markers of G2/M phase and markers of S phase
#Done
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
  
#To assign cells to cell cycle stages
#Cells scored on the basis of their expression of G2/M phase and S phase markers by comparing average expression of these markers with that of a random set of background genes.
#Cells with positive higher S phase or G2/M phase scores were assigned these markers.
#Cells with negative S-phase and G2/M phase scores were assigned as non-S/G2/M-phase cells and annotated as G0/G1 phases cells.
#Cell subpopulation can thus be classified as three groups
#Done
  
#Assigns scores.
#Done
objscores <- CellCycleScoring(obj, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
  
#View Scores
#Done
head(objscores)
  
  
#Silhouette Analysis

#Conducted with no awareness of cell origins
#Calculated based on Euclidean distance between cells on t-SNE
#Silhouette Analysis provides a graphical representation of how well each object has been clustered. Silhouette ranges from -1 to +1. 
#High values means object well matched to its own cluster and poorly matched to neighboring clusters.
#If many points have low or negative value, clustering configuration may have too many or too few clusters.
#Done

#Should be a high value, like close to 1, as that means that it is clustered well to its own cluster, and a poor match for other cluster. Negative values are bad.



reduction <- "pca"
dims <- 1:8
dist.matrix <- dist(x = Embeddings(object = clusterobj[[reduction]])[, dims])
clusters <- clusterobj@meta.data$seurat_cluster
sil <- silhouette(x = as.numeric(x = clusters), dist = dist.matrix)
clusterobj@meta.data$sil <- sil[,3]

mean_silhouette_score1.4 <- mean(clusterobj@meta.data$sil)
mean_silhouette_score1.4




silhouetteplot <- clusterobj@meta.data %>%
  mutate(barcode = rownames(.)) %>%
  arrange(seurat_clusters,-sil) %>%
  mutate(barcode = factor(barcode, levels = barcode)) %>%
  ggplot() +
  geom_col(aes(barcode, sil, fill = seurat_clusters), show.legend = FALSE) +
  geom_hline(yintercept = mean_silhouette_score1.4, color = 'red', linetype = 'dashed') +
  scale_x_discrete(name = 'Cells') +
  scale_y_continuous(name = 'Silhouette score') +
  theme_bw() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
silhouetteplot






                        #Clustering within each cell cycle subset  

#Check Entropy Scores:
#resolution 2.3 for G1 cells
#resolution 0.6 for G2/M cells
#resolution 0.9 for S cells



#Set cell identity classes using SetIdents
G1.scaled.data <- as.matrix(GetAssayData(objscores, slot = "counts")[, WhichCells(objscores, idents = 'G1')])
G1cells <- subset(objscores, idents = "G1")
G2Mcells <- subset(objscores, idents = "G2M")
Scells <- subset(objscores, idents = "S")


        #Clustering with G0/G1 cell subpopulation
G1cells <- FindNeighbors(G1cells, dims = 1:8)
G1cells <- FindClusters(G1cells, algorithm = 3, resolution = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5))
G1cells <- FindClusters(G1cells, algorithm = 3, resolution = 2.3)

G1.num.clusters <- table(G1cells@active.ident)
G1.num.clusters
G1.num.oldident <- table(G1cells@meta.data$seurat_clusters, G1cells@meta.data$orig.ident)
G1.num.oldident
G1.num.ident <- table(objscores@meta.data$orig.ident)
G1.num.ident

#G1 Entropy Score
G1fi0 <- 
G1fi1 <-
G1fi2 <-
G1fi3 <-
G1fi4 <-
G1fi5 <-
G1fi6 <-
G1fi7 <-
G1fi8 <-
G1fi9 <-
G1fi10 <-
G1fi11 <-
G1fi12 <-
G1fi13 <-
G1fi14 <-
G1fi15 <-
G1fi16 <-
G1fi17 <-
G1fi18 <-
G1fi19 <-
G1fi20 <-
G1fi21 <-
  
a1 <- (fi0/17998 * ((88/fi0 * ln(88/fi0)) + (711/fi0 * ln(711/fi0)) + (711/fi0 * ln(711/fi0)))) + (fi1/17998 * ((0) + (1/fi1 * ln(1/fi1)) + (2/fi1 * ln(2/fi1)))) + (fi2/17998 * ((1077/fi2 * ln(1077/fi2)) + (171/fi2 * ln(171/fi2)) + (20/fi2 * ln(20/fi2)))) + (fi3/17998 * ((131/fi3 * ln(131/fi3)) + (66/fi3 * ln(66/fi3)) + (40/fi3 * ln(40/fi3)))) + (fi4/17998 * (243/fi4 * ln(243/fi4)) + (484/fi4 * ln(484/fi4)) + (458/fi4 * ln(458/fi4))) + (fi5/17998 * ((282/fi5 * ln(282/fi5)) + (107/fi5 * ln(107/fi5)) + (16/fi5 * ln(16/fi5)))) + (fi6/17998 * ((337/fi6 * ln(337/fi6)) + (361/fi6 * ln(361/fi6)) + (260/fi6 * ln(260/fi6)))) + (fi7/17998 * ((0) + (3/fi7 * ln(3/fi7)) + (4/fi7 * ln(4/fi7)))) + (fi8/17998 * ((38/fi8 * ln(38/fi8)) + (398 + ln(398/fi8)) + (409/fi8 + ln(409/fi8)))) + (fi9/17998 * ((124/fi9 * ln(124/fi9)) + (290/fi9 * ln(290/fi9)) + (327/fi9 * ln(327/fi9)))) + (fi10/17998 * ((360/fi10 + ln(360/fi10)) + (282/fi10 + ln(282/fi10)) + (157/fi10 + ln(157/fi10)))) + (fi11/17998 * ((34/fi11 + ln(34/fi11)) + (290/fi11 + ln(290/fi11)) + (496/fi11 + ln(496/fi11)))) + (fi12/17998 * ((715/fi12 + ln(715/fi12)) + (44/fi12 + ln(44/fi12)) + (12/fi12 + ln(12/fi12)))) + (fi13/17998 * ((20/fi13 + ln(20/fi13)) + (6/fi13 + ln(6/fi13)) + (6/fi13 + ln(6/fi13)))) + (fi14/17998 * ((68/fi14 + ln(68/fi14)) + (12/fi14 + ln(12/fi14)) + (7/fi14 + ln(7/fi14)))) + (fi15/17998 * ((0) + (0) + (0))) + (fi16/17998 * ((323/fi16 + ln(323/fi16)) + (172/fi16 + ln(172/fi16)) + (163/fi16 + ln(163/fi16)))) + (fi17/17998 * ((127/fi17 + ln(127/fi17)) + (152/fi17 + ln(152/fi17)) + (138/fi17 + ln(138/fi17)))) + (fi18/17998 * ((131/fi18 + ln(131/fi18)) + (30/fi18 + ln(30/fi18)) + (3/fi18 + ln(3/fi18)))) + (fi19/17998 * ((1/fi19 + ln(1/fi19)) + (3/fi19 + ln(3/fi19)) + (3/fi19 + ln(3/fi19))))                          

a2 <- -((4099/17998 * ln(fi0/17998)) + (3583/17998 * ln(fi0/17998)) + (3232/17998 * ln(fi0/17998))) - ((4099/17998 * ln(fi1/17998)) + (3583/17998 * ln(fi1/17998)) + (3232/17998 * ln(fi1/17998))) - ((4099/17998 * ln(fi2/17998)) + (3583/17998 * ln(fi2/17998)) + (3232/17998 * ln(fi2/17998))) - ((4099/17998 * ln(fi3/17998)) + (3583/17998 * ln(fi3/17998)) + (3232/17998 * ln(fi3/17998))) - ((4099/17998 * ln(fi4/17998)) + (3583/17998 * ln(fi4/17998)) + (3232/17998 * ln(fi4/17998))) - ((4099/17998 * ln(fi5/17998)) + (3583/17998 * ln(fi5/17998)) + (3232/17998 * ln(fi5/17998))) - ((4099/17998 * ln(fi6/17998)) + (3583/17998 * ln(fi6/17998)) + (3232/17998 * ln(fi6/17998))) - ((4099/17998 * ln(fi7/17998)) + (3583/17998 * ln(fi7/17998)) + (3232/17998 * ln(fi7/17998))) - ((4099/17998 * ln(fi8/17998)) + (3583/17998 * ln(fi8/17998)) + (3232/17998 * ln(fi8/17998))) - ((4099/17998 * ln(fi9/17998)) + (3583/17998 * ln(fi9/17998)) + (3232/17998 * ln(fi9/17998))) - ((4099/17998 * ln(fi10/17998)) + (3583/17998 * ln(fi10/17998)) + (3232/17998 * ln(fi10/17998))) - ((4099/17998 * ln(fi11/17998)) + (3583/17998 * ln(fi11/17998)) + (3232/17998 * ln(fi11/17998))) - ((4099/17998 * ln(fi12/17998)) + (3583/17998 * ln(fi12/17998)) + (3232/17998 * ln(fi12/17998))) - ((4099/17998 * ln(fi13/17998)) + (3583/17998 * ln(fi13/17998)) + (3232/17998 * ln(fi13/17998))) - ((4099/17998 * ln(fi14/17998)) + (3583/17998 * ln(fi14/17998)) + (3232/17998 * ln(fi14/17998))) - ((4099/17998 * ln(fi15/17998)) + (3583/17998 * ln(fi15/17998)) + (3232/17998 * ln(fi15/17998))) - ((4099/17998 * ln(fi16/17998)) + (3583/17998 * ln(fi16/17998)) + (3232/17998 * ln(fi16/17998))) - ((4099/17998 * ln(fi17/17998)) + (3583/17998 * ln(fi17/17998)) + (3232/17998 * ln(fi17/17998))) - ((4099/17998 * ln(fi18/17998)) + (3583/17998 * ln(fi18/17998)) + (3232/17998 * ln(fi18/17998))) - ((4099/17998 * ln(fi19/17998)) + (3583/17998 * ln(fi19/17998)) + (3232/17998 * ln(fi19/17998)))

G1_entropy_score <- a1/a2

#G1 Fisher's Exact Test
rand.seed <- 98
down.num <- 150
my.times <- 100
my.B <- 1e7

resolutions <- c(2:25) * 0.1

set.seed(rand.seed)

picks <- data.frame(num=c(1:down.num))
scores <- data.frame(res=resolutions)
for (k in c(1:my.times)){
  cat(paste("round", k, "", sep=" "))
  # down-sampling data
  tpick <- sample(nrow(G1cells), down.num)
  G1cells.subset <- G1cells[tpick,]
  # make sure there are at least two clusters
  }
  # save which samples were picked
  tround <- paste("round", k, sep=".")
  picks[,tround] <- tpick
  # run fisher's exact test at each resolution using the sampled cells
  tscores <- c()
  for (r in resolutions){
    cat(".")
    res <- paste("res", r, sep=".")
    ##if (length(unique(clust.subset[,res])) == 1){# only a single cluster
    ##  tscores <- c(tscores, NA)
    ##}
    # run test
    result <- fisher.test(x=G1cells.subset$orig.ident, y=factor(G1cells.subset[,res]), simulate.p.value=T, B=my.B)
    # log transform p-value and save it
    tscores <- c(tscores, -log10(result$p.value))
  }
  scores[,tround] <- tscores
  cat(" ok.\n")
}
rownames(scores) <- paste("res", resolutions, sep=".")
scores <- as.data.frame(t(scores[,c(-1)]))

#savescores
write.table(scores, file=paste(figdir, "res.fisher.score.v2.txt", sep="\\"), quote=FALSE, na="", sep="\t", col.names=NA)
# save picks
picks <- picks[,c(-1)]
write.table(picks, file=paste(figdir, "res.fisher.picks.v2.txt", sep="\\"), quote=FALSE, na="", sep="\t", col.names=NA)

# calculate number of clusters per resolution
numclust <- c()
for (r in resolutions){
  res <- paste("res", r, sep=".")
  numclust <- c(numclust, length(unique(clust[,c(res)])))
}

# calculate mean, standard deviation, standard error of fisher's score per resolution
score.mean <- sapply(scores, mean)
score.sd <- sapply(scores, sd)
score.se <- score.sd/sqrt(my.times)
data.to.plot <- data.frame(res=resolutions, numclust=numclust, mean=score.mean, sd=score.sd, se=score.se)
write.table(data.to.plot, file=paste(workdir,"figure","fisher.for.plot.S.WT_NEG_ACT.txt",sep="\\"), quote=FALSE, na="", sep="\t", col.names=NA)

# calculate number-of-clusters-to-score ratio
tfactor <- floor(max(numclust)/max(score.mean))










 
            #Clustering with G2/M cell subpopulation
G2Mcells <- FindNeighbors(G2Mcells, dims = 1:8)
G2Mcells <- FindClusters(G2Mcells, algorithm = 3, resolution = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5))
G2Mcells <- FindClusters(G2Mcells, algorithm = 3, resolution = 0.6)


#Entropy Score
G2Mfi0 <- 
G2Mfi1 <-
G2Mfi2 <-
G2Mfi3 <-
G2Mfi4 <-
G2Mfi5 <-
  
b1 <- (fi0/17998 * ((88/fi0 * ln(88/fi0)) + (711/fi0 * ln(711/fi0)) + (711/fi0 * ln(711/fi0)))) + (fi1/17998 * ((0) + (1/fi1 * ln(1/fi1)) + (2/fi1 * ln(2/fi1)))) + (fi2/17998 * ((1077/fi2 * ln(1077/fi2)) + (171/fi2 * ln(171/fi2)) + (20/fi2 * ln(20/fi2)))) + (fi3/17998 * ((131/fi3 * ln(131/fi3)) + (66/fi3 * ln(66/fi3)) + (40/fi3 * ln(40/fi3)))) + (fi4/17998 * (243/fi4 * ln(243/fi4)) + (484/fi4 * ln(484/fi4)) + (458/fi4 * ln(458/fi4))) + (fi5/17998 * ((282/fi5 * ln(282/fi5)) + (107/fi5 * ln(107/fi5)) + (16/fi5 * ln(16/fi5)))) + (fi6/17998 * ((337/fi6 * ln(337/fi6)) + (361/fi6 * ln(361/fi6)) + (260/fi6 * ln(260/fi6)))) + (fi7/17998 * ((0) + (3/fi7 * ln(3/fi7)) + (4/fi7 * ln(4/fi7)))) + (fi8/17998 * ((38/fi8 * ln(38/fi8)) + (398 + ln(398/fi8)) + (409/fi8 + ln(409/fi8)))) + (fi9/17998 * ((124/fi9 * ln(124/fi9)) + (290/fi9 * ln(290/fi9)) + (327/fi9 * ln(327/fi9)))) + (fi10/17998 * ((360/fi10 + ln(360/fi10)) + (282/fi10 + ln(282/fi10)) + (157/fi10 + ln(157/fi10)))) + (fi11/17998 * ((34/fi11 + ln(34/fi11)) + (290/fi11 + ln(290/fi11)) + (496/fi11 + ln(496/fi11)))) + (fi12/17998 * ((715/fi12 + ln(715/fi12)) + (44/fi12 + ln(44/fi12)) + (12/fi12 + ln(12/fi12)))) + (fi13/17998 * ((20/fi13 + ln(20/fi13)) + (6/fi13 + ln(6/fi13)) + (6/fi13 + ln(6/fi13)))) + (fi14/17998 * ((68/fi14 + ln(68/fi14)) + (12/fi14 + ln(12/fi14)) + (7/fi14 + ln(7/fi14)))) + (fi15/17998 * ((0) + (0) + (0))) + (fi16/17998 * ((323/fi16 + ln(323/fi16)) + (172/fi16 + ln(172/fi16)) + (163/fi16 + ln(163/fi16)))) + (fi17/17998 * ((127/fi17 + ln(127/fi17)) + (152/fi17 + ln(152/fi17)) + (138/fi17 + ln(138/fi17)))) + (fi18/17998 * ((131/fi18 + ln(131/fi18)) + (30/fi18 + ln(30/fi18)) + (3/fi18 + ln(3/fi18)))) + (fi19/17998 * ((1/fi19 + ln(1/fi19)) + (3/fi19 + ln(3/fi19)) + (3/fi19 + ln(3/fi19))))                          

b2 <- -((4099/17998 * ln(fi0/17998)) + (3583/17998 * ln(fi0/17998)) + (3232/17998 * ln(fi0/17998))) - ((4099/17998 * ln(fi1/17998)) + (3583/17998 * ln(fi1/17998)) + (3232/17998 * ln(fi1/17998))) - ((4099/17998 * ln(fi2/17998)) + (3583/17998 * ln(fi2/17998)) + (3232/17998 * ln(fi2/17998))) - ((4099/17998 * ln(fi3/17998)) + (3583/17998 * ln(fi3/17998)) + (3232/17998 * ln(fi3/17998))) - ((4099/17998 * ln(fi4/17998)) + (3583/17998 * ln(fi4/17998)) + (3232/17998 * ln(fi4/17998))) - ((4099/17998 * ln(fi5/17998)) + (3583/17998 * ln(fi5/17998)) + (3232/17998 * ln(fi5/17998))) - ((4099/17998 * ln(fi6/17998)) + (3583/17998 * ln(fi6/17998)) + (3232/17998 * ln(fi6/17998))) - ((4099/17998 * ln(fi7/17998)) + (3583/17998 * ln(fi7/17998)) + (3232/17998 * ln(fi7/17998))) - ((4099/17998 * ln(fi8/17998)) + (3583/17998 * ln(fi8/17998)) + (3232/17998 * ln(fi8/17998))) - ((4099/17998 * ln(fi9/17998)) + (3583/17998 * ln(fi9/17998)) + (3232/17998 * ln(fi9/17998))) - ((4099/17998 * ln(fi10/17998)) + (3583/17998 * ln(fi10/17998)) + (3232/17998 * ln(fi10/17998))) - ((4099/17998 * ln(fi11/17998)) + (3583/17998 * ln(fi11/17998)) + (3232/17998 * ln(fi11/17998))) - ((4099/17998 * ln(fi12/17998)) + (3583/17998 * ln(fi12/17998)) + (3232/17998 * ln(fi12/17998))) - ((4099/17998 * ln(fi13/17998)) + (3583/17998 * ln(fi13/17998)) + (3232/17998 * ln(fi13/17998))) - ((4099/17998 * ln(fi14/17998)) + (3583/17998 * ln(fi14/17998)) + (3232/17998 * ln(fi14/17998))) - ((4099/17998 * ln(fi15/17998)) + (3583/17998 * ln(fi15/17998)) + (3232/17998 * ln(fi15/17998))) - ((4099/17998 * ln(fi16/17998)) + (3583/17998 * ln(fi16/17998)) + (3232/17998 * ln(fi16/17998))) - ((4099/17998 * ln(fi17/17998)) + (3583/17998 * ln(fi17/17998)) + (3232/17998 * ln(fi17/17998))) - ((4099/17998 * ln(fi18/17998)) + (3583/17998 * ln(fi18/17998)) + (3232/17998 * ln(fi18/17998))) - ((4099/17998 * ln(fi19/17998)) + (3583/17998 * ln(fi19/17998)) + (3232/17998 * ln(fi19/17998)))

G2M_entropy_score <- b1/b2



            #Clustering with S cell subpopulation
Scells <- FindNeighbors(Scells, dims = 1:8)
Scells <- FindClusters(Scells, algorithm = 3, resolution = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5))
Scells <- FindClusters(Scells, algorithm = 3, resolution = 0.9)


#Entropy Score
Sfi0 <- 
Sfi1 <-
Sfi2 <-
Sfi3 <-
Sfi4 <-
Sfi5 <-
Sfi6 <- 
  
c1 <- (fi0/17998 * ((88/fi0 * ln(88/fi0)) + (711/fi0 * ln(711/fi0)) + (711/fi0 * ln(711/fi0)))) + (fi1/17998 * ((0) + (1/fi1 * ln(1/fi1)) + (2/fi1 * ln(2/fi1)))) + (fi2/17998 * ((1077/fi2 * ln(1077/fi2)) + (171/fi2 * ln(171/fi2)) + (20/fi2 * ln(20/fi2)))) + (fi3/17998 * ((131/fi3 * ln(131/fi3)) + (66/fi3 * ln(66/fi3)) + (40/fi3 * ln(40/fi3)))) + (fi4/17998 * (243/fi4 * ln(243/fi4)) + (484/fi4 * ln(484/fi4)) + (458/fi4 * ln(458/fi4))) + (fi5/17998 * ((282/fi5 * ln(282/fi5)) + (107/fi5 * ln(107/fi5)) + (16/fi5 * ln(16/fi5)))) + (fi6/17998 * ((337/fi6 * ln(337/fi6)) + (361/fi6 * ln(361/fi6)) + (260/fi6 * ln(260/fi6)))) + (fi7/17998 * ((0) + (3/fi7 * ln(3/fi7)) + (4/fi7 * ln(4/fi7)))) + (fi8/17998 * ((38/fi8 * ln(38/fi8)) + (398 + ln(398/fi8)) + (409/fi8 + ln(409/fi8)))) + (fi9/17998 * ((124/fi9 * ln(124/fi9)) + (290/fi9 * ln(290/fi9)) + (327/fi9 * ln(327/fi9)))) + (fi10/17998 * ((360/fi10 + ln(360/fi10)) + (282/fi10 + ln(282/fi10)) + (157/fi10 + ln(157/fi10)))) + (fi11/17998 * ((34/fi11 + ln(34/fi11)) + (290/fi11 + ln(290/fi11)) + (496/fi11 + ln(496/fi11)))) + (fi12/17998 * ((715/fi12 + ln(715/fi12)) + (44/fi12 + ln(44/fi12)) + (12/fi12 + ln(12/fi12)))) + (fi13/17998 * ((20/fi13 + ln(20/fi13)) + (6/fi13 + ln(6/fi13)) + (6/fi13 + ln(6/fi13)))) + (fi14/17998 * ((68/fi14 + ln(68/fi14)) + (12/fi14 + ln(12/fi14)) + (7/fi14 + ln(7/fi14)))) + (fi15/17998 * ((0) + (0) + (0))) + (fi16/17998 * ((323/fi16 + ln(323/fi16)) + (172/fi16 + ln(172/fi16)) + (163/fi16 + ln(163/fi16)))) + (fi17/17998 * ((127/fi17 + ln(127/fi17)) + (152/fi17 + ln(152/fi17)) + (138/fi17 + ln(138/fi17)))) + (fi18/17998 * ((131/fi18 + ln(131/fi18)) + (30/fi18 + ln(30/fi18)) + (3/fi18 + ln(3/fi18)))) + (fi19/17998 * ((1/fi19 + ln(1/fi19)) + (3/fi19 + ln(3/fi19)) + (3/fi19 + ln(3/fi19))))                          

c2 <- -((4099/17998 * ln(fi0/17998)) + (3583/17998 * ln(fi0/17998)) + (3232/17998 * ln(fi0/17998))) - ((4099/17998 * ln(fi1/17998)) + (3583/17998 * ln(fi1/17998)) + (3232/17998 * ln(fi1/17998))) - ((4099/17998 * ln(fi2/17998)) + (3583/17998 * ln(fi2/17998)) + (3232/17998 * ln(fi2/17998))) - ((4099/17998 * ln(fi3/17998)) + (3583/17998 * ln(fi3/17998)) + (3232/17998 * ln(fi3/17998))) - ((4099/17998 * ln(fi4/17998)) + (3583/17998 * ln(fi4/17998)) + (3232/17998 * ln(fi4/17998))) - ((4099/17998 * ln(fi5/17998)) + (3583/17998 * ln(fi5/17998)) + (3232/17998 * ln(fi5/17998))) - ((4099/17998 * ln(fi6/17998)) + (3583/17998 * ln(fi6/17998)) + (3232/17998 * ln(fi6/17998))) - ((4099/17998 * ln(fi7/17998)) + (3583/17998 * ln(fi7/17998)) + (3232/17998 * ln(fi7/17998))) - ((4099/17998 * ln(fi8/17998)) + (3583/17998 * ln(fi8/17998)) + (3232/17998 * ln(fi8/17998))) - ((4099/17998 * ln(fi9/17998)) + (3583/17998 * ln(fi9/17998)) + (3232/17998 * ln(fi9/17998))) - ((4099/17998 * ln(fi10/17998)) + (3583/17998 * ln(fi10/17998)) + (3232/17998 * ln(fi10/17998))) - ((4099/17998 * ln(fi11/17998)) + (3583/17998 * ln(fi11/17998)) + (3232/17998 * ln(fi11/17998))) - ((4099/17998 * ln(fi12/17998)) + (3583/17998 * ln(fi12/17998)) + (3232/17998 * ln(fi12/17998))) - ((4099/17998 * ln(fi13/17998)) + (3583/17998 * ln(fi13/17998)) + (3232/17998 * ln(fi13/17998))) - ((4099/17998 * ln(fi14/17998)) + (3583/17998 * ln(fi14/17998)) + (3232/17998 * ln(fi14/17998))) - ((4099/17998 * ln(fi15/17998)) + (3583/17998 * ln(fi15/17998)) + (3232/17998 * ln(fi15/17998))) - ((4099/17998 * ln(fi16/17998)) + (3583/17998 * ln(fi16/17998)) + (3232/17998 * ln(fi16/17998))) - ((4099/17998 * ln(fi17/17998)) + (3583/17998 * ln(fi17/17998)) + (3232/17998 * ln(fi17/17998))) - ((4099/17998 * ln(fi18/17998)) + (3583/17998 * ln(fi18/17998)) + (3232/17998 * ln(fi18/17998))) - ((4099/17998 * ln(fi19/17998)) + (3583/17998 * ln(fi19/17998)) + (3232/17998 * ln(fi19/17998)))

S_entropy_score <- c1/c2


#change fi in bottom equation to fj














        #Population Analysis
#Can do once I've finished the earlier analyses



#Correlation Analysis of Subpopulations
#In each cell cycle (G0/G1, S and G2/M) of the cells treated with DMSO, SKI-73 (6a) or SKI-73N (6b) and 'invasion cells', correlation analysis of subpopulations was conducted

#BuildClusterTree(object = , features = VariableFeatures(object = object), )


#Differential Expression and Selection of Representative Transcripts

#FindMarkers(object, features = VariableFeatures(object = object), test.use = "wilcox")

#DoHeatmap(object, )
















#FUNCTIONS




          #Figures


#Figure 7 t-SNE Plot
clusterobj <- RunTSNE(clusterobj, dims = 1:8)
tSNE <- DimPlot(clusterobj, reduction = "tsne", label = TRUE, label.box = TRUE) + ggtitle('tSNE plots by Cluster') + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())



#Figure 7 supplement 1 Quality Control Plot
feats <- c("nCount_RNA", "nFeature_RNA", "percent.mt")
QCPlot <- VlnPlot(obj, group.by = "orig.ident", features = feats, ncol = 1) + NoLegend()
QCPlot


#Figure 7 supplement 2 Silhouette Plot 1
data <- data.frame(
  value1 = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.1, 2.2, 2.3, 2.4, 2.5) ,
  value2 = c(mean_silhouette_score0.1, mean_silhouette_score0.2, mean_silhouette_score0.3, mean_silhouette_score0.4, mean_silhouette_score0.5, mean_silhouette_score0.6, mean_silhouette_score0.7, mean_silhouette_score0.8, mean_silhouette_score0.9, mean_silhouette_score1.0, mean_silhouette_score1.1, mean_silhouette_score1.2, mean_silhouette_score1.3, mean_silhouette_score1.4, mean_silhouette_score1.5, mean_silhouette_score1.6, mean_silhouette_score1.7, mean_silhouette_score1.8, mean_silhouette_score1.9, mean_silhouette_score2.0, mean_silhouette_score2.1, mean_silhouette_score2.2, mean_silhouette_score2.3, mean_silhouette_score2.4, mean_silhouette_score2.5)
)

ggplot(data, aes(x = value1, y = value2)) + xlab("Resolution Granularity") + ylab("Silhouette Score")



#Figure 7 supplement 2 Silhouette Plot 2
reduction <- "pca"
dims <- 1:8
dist.matrix <- dist(x = Embeddings(object = clusterobj[[reduction]])[, dims])
clusters <- clusterobj@meta.data$seurat_cluster
sil <- silhouette(x = as.numeric(x = clusters), dist = dist.matrix)
clusterobj@meta.data$sil <- sil[,3]

mean_silhouette_score1.4 <- mean(clusterobj@meta.data$sil)
mean_silhouette_score1.4


silhouetteplot <- clusterobj@meta.data %>%
  mutate(barcode = rownames(.)) %>%
  arrange(seurat_clusters,-sil) %>%
  mutate(barcode = factor(barcode, levels = barcode)) %>%
  ggplot() +
  geom_col(aes(barcode, sil, fill = seurat_clusters), show.legend = FALSE) +
  geom_hline(yintercept = mean_silhouette_score1.4, color = 'red', linetype = 'dashed') +
  scale_x_discrete(name = 'Cells') +
  scale_y_continuous(name = 'Silhouette score') +
  theme_bw() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
silhouetteplot


#Figure 7 supplement 3 t-SNE Plots
clusterobj <- RunTSNE(clusterobj, dims = 1:8)
TSNEplot <- DimPlot(clusterobj, reduction = "tsne", label = TRUE, label.box = TRUE) +  theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())
tSNEplot1 <- DimPlot(clusterobj, reduction = "tsne", label = TRUE, label.box = TRUE) + ggtitle('tSNE plots by Cluster - SKI73N') + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())
tSNEplot2 <- DimPlot(clusterobj, reduction = "tsne", label = TRUE, label.box = TRUE) + ggtitle('tSNE plots by Cluster - DMSO') + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())
tSNEplot3 <- DimPlot(clusterobj, reduction = "tsne", label = TRUE, label.box = TRUE) + ggtitle('tSNE plots by Cluster - SKI73') + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())


#Figure 7 supplement 4 t-SNE Plots
feats1 <- c("S_score", "G2/M_score")
QCPlot1 <- VlnPlot(objscores, group.by = "Phase", features = feats1, ncol = 1)


#Figure 7 Supplement 5 t-SNE Plots
tSNEplot4 <- DimPlot(objscores, reduction = "tsne") + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())
tSNEplot5 <- DimPlot(objscores, reduction = "tsne", label = TRUE, label.box = TRUE) + ggtitle('tSNE plots by Phase - SKI73N') + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())
tSNEplot6 <- DimPlot(objscores, reduction = "tsne", label = TRUE, label.box = TRUE) + ggtitle('tSNE plots by Phase - DMSO') + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())
tSNEplot7 <- DimPlot(objscores, reduction = "tsne", label = TRUE, label.box = TRUE) + ggtitle('tSNE plots by Phase - SKI-73') + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())


#Figure 7 supplement 6 Plots
#calculate percentages

bps1 <- data.frame(
  group = c("G0/G1", "G2/M", "S"),
  value = c()
  
)

bps2 <- data.frame(
  group = c("G0/G1", "G2/M", "S"),
  value = c()
  
)

bps3 <- data.frame(
  group = c("G0/G1", "G2/M", "S"),
  value = c()
  
)

bp1 <- ggplot(bps1, aes(x = "", y = value, fill=group)) + geom_bar(width = 1, stat = "identity")
bp2 <- ggplot(bps2, aes(x = "", y = value, fill=group)) + geom_bar(width = 1, stat = "identity")
bp3 <- ggplot(bps3, aes(x = "", y = value, fill=group)) + geom_bar(width = 1, stat = "identity")


pie1 <- bp1 + coord_polar("y", start = 0) + scale_fill_brewer(palette = "Spectral")
pie2 <- bp2 + coord_polar("y", start = 0) + scale_fill_brewer(palette = "Spectral")
pie3 <- bp3 + coord_polar("y", start = 0) + scale_fill_brewer(palette = "Spectral")

pieplot <- pie1 + pie2 + pie3

#Figure 7 supplement 22 Plot
tSNEplot5 <- DimPlot(objscores, reduction = "tsne", label = TRUE, label.box = TRUE) + ggtitle('tSNE plots by Sample') + theme(plot.title = element_text(hjust = 0.5), axis.ticks = element_blank(), axis.text = element_blank())

#Quality Control of S-phase cells

#tSNE of S phase cells with orig-ident

#tSNE of s phase cells with orig ident

#QC Plot of G2/M phase cells

#tSNE of G2/M phase cells

#tSNE of G2/M phase cells

#Population analysis plot

#Population analysis plot

#tSNE of cell population with five origins

#tSNE of invasion cells

#G2/M and S phase score plot

#tSNE plot with cell cycle awareness and cell cycle assignment

#Figure 7 supplement 38

#Figure 7 supplement 39

#Figure 7 supplement 40

#Figure 7 supplement 41

#Figure 7 supplement 42

#Figure 7 supplement 43









